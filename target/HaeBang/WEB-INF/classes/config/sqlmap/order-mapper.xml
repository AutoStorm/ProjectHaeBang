<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.haebang.user.dao.SrvDao">


	<select id="selectServiceList" resultType="serviceVo" parameterType="serviceVo">
		select *
		from t_service
		where s_type=#{s_type} and s_place=#{s_place} and s_size between #{s_size} and #{s_size}+9
	</select>
	
	
	 <insert id="insertScdToNewMember" parameterType="java.util.HashMap">
		insert into t_member(m_name, m_address, m_phone, m_type, m_lon, m_lat) values(#{name}, #{address}, #{phone}, #{type}, #{lon}, #{lat})
	</insert>
	
	
	<select id="selectUserByInfo" parameterType="java.util.HashMap" resultType="memberVo">
		select m_no from t_member where m_phone=#{phone}
	</select>
	
	
	<insert id="insertScdByMNoOnetime" parameterType="java.util.HashMap">
		insert into t_m_order(mo_orderNo, m_no, mo_startTime, mo_endTime, s_no, mo_cnt, mo_freqType) 
		values(#{orderNo}, #{m_no}, #{startTime}, #{endTime}, #{service}, #{cnt}, #{unit})
	</insert>
	
	
	<insert id="insertScdByMNo" parameterType="java.util.HashMap">
		insert into t_m_order(mo_orderNo, m_no, mo_startTime, mo_endTime, s_no, mo_cnt, mo_total, mo_freqType, mo_freqCycle) values
		<foreach collection="scheduleList" item="item" separator=",">
		(#{orderNo}, #{m_no}, #{item.startTime}, #{item.endTime}, #{service}, #{item.cnt}, #{total}, #{unit}, #{cycle})
		</foreach>
	</insert>
	
	
	<!-- ******************************** 창대 ******************************** -->

	<select id="selectNoOneEmployee" parameterType="java.util.HashMap" resultType="Integer">
	select LastOne.e_no from (Select AA.c_no, AA.e_no, AA.e_name, AA.m_no, AA.m_name, AA.m_lon, AA.m_lat, AA.lonlatGrade, BB.starGrade, ZZZ.profitGrade, (AA.lonlatGrade+BB.starGrade+ZZZ.profitGrade) as totalGrade 
from ((select SSS.e_no, SSS.c_no, SSS.e_name, B.mo_no, B.m_no, B.mo_startTime, t_member.m_address, t_member.m_name, t_member.m_lon, t_member.m_lat, (case when (ABS(t_member.m_lon -#{lon}) + (ABS(t_member.m_lat-#{lat}))*3.3) >=0.5 then 1 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.4 then 1.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.3 then 2 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.2 then 2.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.1 then 3 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.05 then 3.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >= 0 then 4 else 1 end) as
lonlatGrade from 
((select t_employee.e_no, t_employee.e_name, t_employee.c_no 
from (select A.mo_no, t_e_order.e_no from t_e_order inner join 
(select * from t_m_order where date_format(mo_startTime,"%Y%m%d%H") = #{dateHourForNoOneEmployee}) as A  
on t_e_order.mo_no=A.mo_no) as YY right join t_employee 
on YY.e_no = t_employee.e_no where YY.e_no is null) as SSS left outer join (select C.mo_no, C.m_no, C.mo_startTime, t_e_order.e_no from t_e_order 
inner join (select * from t_m_order where 
date_format(mo_startTime,"%Y%m%d") = #{dateForNoOneEmployee} and date_format(mo_startTime,"%Y%m%d%H") != #{dateHourForNoOneEmployee} ) as C 
on t_e_order.mo_no = C.mo_no) as B on SSS.e_no =B.e_no) left join t_member on t_member.m_no = B.m_no) as AA inner join 
(select t_employee.c_no, if((AVG(D.mo_star)*4/5)>=1,(AVG(D.mo_star)*4/5),1) as starGrade from ((select mo_no, mo_startTime,mo_star from t_m_order where (date_format(mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1))) as D inner join t_e_order on D.mo_no = t_e_order.mo_no) inner join t_employee on t_employee.e_no = t_e_order.e_no group by t_employee.c_no) as BB on AA.c_no= BB.c_no) inner join (select  t_employee.c_no, count(t_service.s_price), sum(t_service.s_price),
(case when sum(t_service.s_price)-#{prevMonthOutCome}=0 then 3 when sum(t_service.s_price)-#{prevMonthOutCome} >2000000 then 1.1
when sum(t_service.s_price)-#{prevMonthOutCome} >1600000 then 1.3
when sum(t_service.s_price)-#{prevMonthOutCome} >1400000 then 1.5
when sum(t_service.s_price)-#{prevMonthOutCome} >1200000 then 1.7
when sum(t_service.s_price)-#{prevMonthOutCome} >1000000 then 1.9
when sum(t_service.s_price)-#{prevMonthOutCome} >500000 then 2.1
when sum(t_service.s_price)-#{prevMonthOutCome} >100000 then 2.3
when sum(t_service.s_price)-#{prevMonthOutCome} >50000 then 2.5
when sum(t_service.s_price)-#{prevMonthOutCome} >20000 then 2.7
when sum(t_service.s_price)-#{prevMonthOutCome} >10000 then 2.9 else 2.95 end) as
profitGrade
from (((t_m_order inner join t_service on t_m_order.s_no=t_service.s_no) inner join t_e_order on t_e_order.mo_no=t_m_order.mo_no) inner join t_employee on t_employee.e_no= t_e_order.e_no) where date_format(t_m_order.mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1) group by t_employee.c_no) as ZZZ on AA.c_no = ZZZ.c_no) as LastOne left join ((select * from t_cancelCall where mo_no=#{mo_no}) as t_cancelCall) on t_cancelCall.e_no = LastOne.e_no where t_cancelCall.e_no is null  order by totalGrade desc, starGrade desc limit 1;

	</select>

	<select id="selectPrevMonthOutCome" resultType="Integer">
		select MIN(A) as minValue from
		(select t_employee.c_no, count(t_service.s_price), sum(t_service.s_price) as
		A
		from (((t_m_order inner join t_service on t_m_order.s_no=t_service.s_no)
		inner join t_e_order on t_e_order.mo_no=t_m_order.mo_no)
		inner join t_employee on t_employee.e_no= t_e_order.e_no)
		where date_format(t_m_order.mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1) group by t_employee.c_no) as AAA;

	</select>

	<update id="createEvent" parameterType="java.util.HashMap">
	

CREATE EVENT ${orderNo} ON SCHEDULE
EVERY 60 MINUTE STARTS CURRENT_TIMESTAMP + INTERVAL 60 MINUTE
DO 
BEGIN
Insert into t_cancelCall(mo_no,e_no) values(#{mo_no}, (select e_no_first from t_m_order where mo_no=#{mo_no}));

if (Select LastOne.e_no from (Select AA.c_no, AA.e_no, AA.e_name, AA.m_no, AA.m_name, AA.m_lon, AA.m_lat, AA.lonlatGrade, BB.starGrade, ZZZ.profitGrade, (AA.lonlatGrade+BB.starGrade+ZZZ.profitGrade) as totalGrade 
from ((select SSS.e_no, SSS.c_no, SSS.e_name, B.mo_no, B.m_no, B.mo_startTime, t_member.m_address, t_member.m_name, t_member.m_lon, t_member.m_lat, (case when (ABS(t_member.m_lon -#{lon}) + (ABS(t_member.m_lat-#{lat}))*3.3) >=0.5 then 1 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.4 then 1.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.3 then 2 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.2 then 2.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.1 then 3 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.05 then 3.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >= 0 then 4 else 1 end) as
lonlatGrade from 
((select t_employee.e_no, t_employee.e_name, t_employee.c_no 
from (select A.mo_no, t_e_order.e_no from t_e_order inner join 
(select * from t_m_order where date_format(mo_startTime,"%Y%m%d%H") = #{dateHourForNoOneEmployee}) as A  
on t_e_order.mo_no=A.mo_no) as YY right join t_employee 
on YY.e_no = t_employee.e_no where YY.e_no is null) as SSS left outer join (select C.mo_no, C.m_no, C.mo_startTime, t_e_order.e_no from t_e_order 
inner join (select * from t_m_order where 
date_format(mo_startTime,"%Y%m%d") = #{dateForNoOneEmployee} and date_format(mo_startTime,"%Y%m%d%H") != #{dateHourForNoOneEmployee} ) as C 
on t_e_order.mo_no = C.mo_no) as B on SSS.e_no =B.e_no) left join t_member on t_member.m_no = B.m_no) as AA inner join 
(select t_employee.c_no, if((AVG(D.mo_star)*4/5)>=1,(AVG(D.mo_star)*4/5),1) as starGrade from ((select mo_no, mo_startTime,mo_star from t_m_order where (date_format(mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1))) as D inner join t_e_order on D.mo_no = t_e_order.mo_no) inner join t_employee on t_employee.e_no = t_e_order.e_no group by t_employee.c_no) as BB on AA.c_no= BB.c_no) inner join (select  t_employee.c_no, count(t_service.s_price), sum(t_service.s_price),
(case when sum(t_service.s_price)-#{prevMonthOutCome}=0 then 3 when sum(t_service.s_price)-#{prevMonthOutCome} >2000000 then 1.1
when sum(t_service.s_price)-#{prevMonthOutCome} >1600000 then 1.3
when sum(t_service.s_price)-#{prevMonthOutCome} >1400000 then 1.5
when sum(t_service.s_price)-#{prevMonthOutCome} >1200000 then 1.7
when sum(t_service.s_price)-#{prevMonthOutCome} >1000000 then 1.9
when sum(t_service.s_price)-#{prevMonthOutCome} >500000 then 2.1
when sum(t_service.s_price)-#{prevMonthOutCome} >100000 then 2.3
when sum(t_service.s_price)-#{prevMonthOutCome} >50000 then 2.5
when sum(t_service.s_price)-#{prevMonthOutCome} >20000 then 2.7
when sum(t_service.s_price)-#{prevMonthOutCome} >10000 then 2.9 else 2.95 end) as
profitGrade
from (((t_m_order inner join t_service on t_m_order.s_no=t_service.s_no) inner join t_e_order on t_e_order.mo_no=t_m_order.mo_no) inner join t_employee on t_employee.e_no= t_e_order.e_no) where date_format(t_m_order.mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1) group by t_employee.c_no) as ZZZ on AA.c_no = ZZZ.c_no) as LastOne left join ((select * from t_cancelCall where mo_no=#{mo_no}) as t_cancelCall) on t_cancelCall.e_no = LastOne.e_no where t_cancelCall.e_no is null  order by totalGrade desc, starGrade desc limit 1) is null
Then delete from t_cancelCall where mo_no=#{mo_no}; 
End if;

Update t_m_order set e_no_first=(Select LastOne.e_no from (Select AA.c_no, AA.e_no, AA.e_name, AA.m_no, AA.m_name, AA.m_lon, AA.m_lat, AA.lonlatGrade, BB.starGrade, ZZZ.profitGrade, (AA.lonlatGrade+BB.starGrade+ZZZ.profitGrade) as totalGrade 
from ((select SSS.e_no, SSS.c_no, SSS.e_name, B.mo_no, B.m_no, B.mo_startTime, t_member.m_address, t_member.m_name, t_member.m_lon, t_member.m_lat, (case when (ABS(t_member.m_lon -#{lon}) + (ABS(t_member.m_lat-#{lat}))*3.3) >=0.5 then 1 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.4 then 1.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.3 then 2 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.2 then 2.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.1 then 3 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >=0.05 then 3.5 when
(ABS(t_member.m_lon -#{lon}) +
(ABS(t_member.m_lat-#{lat}))*3.3) >= 0 then 4 else 1 end) as
lonlatGrade from 
((select t_employee.e_no, t_employee.e_name, t_employee.c_no 
from (select A.mo_no, t_e_order.e_no from t_e_order inner join 
(select * from t_m_order where date_format(mo_startTime,"%Y%m%d%H") = #{dateHourForNoOneEmployee}) as A  
on t_e_order.mo_no=A.mo_no) as YY right join t_employee
on YY.e_no = t_employee.e_no where YY.e_no is null) as SSS left outer join (select C.mo_no, C.m_no, C.mo_startTime, t_e_order.e_no from t_e_order 
inner join (select * from t_m_order where 
date_format(mo_startTime,"%Y%m%d") = #{dateForNoOneEmployee} and date_format(mo_startTime,"%Y%m%d%H") != #{dateHourForNoOneEmployee} ) as C 
on t_e_order.mo_no = C.mo_no) as B on SSS.e_no =B.e_no) left join t_member on t_member.m_no = B.m_no) as AA inner join 
(select t_employee.c_no, if((AVG(D.mo_star)*4/5)>=1,(AVG(D.mo_star)*4/5),1) as starGrade from ((select mo_no, mo_startTime,mo_star from t_m_order where (date_format(mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1))) as D inner join t_e_order on D.mo_no = t_e_order.mo_no) inner join t_employee on t_employee.e_no = t_e_order.e_no group by t_employee.c_no) as BB on AA.c_no= BB.c_no) inner join (select  t_employee.c_no, count(t_service.s_price), sum(t_service.s_price),
(case when sum(t_service.s_price)-#{prevMonthOutCome}=0 then 3 when sum(t_service.s_price)-#{prevMonthOutCome} >2000000 then 1.1
when sum(t_service.s_price)-#{prevMonthOutCome} >1600000 then 1.3
when sum(t_service.s_price)-#{prevMonthOutCome} >1400000 then 1.5
when sum(t_service.s_price)-#{prevMonthOutCome} >1200000 then 1.7
when sum(t_service.s_price)-#{prevMonthOutCome} >1000000 then 1.9
when sum(t_service.s_price)-#{prevMonthOutCome} >500000 then 2.1
when sum(t_service.s_price)-#{prevMonthOutCome} >100000 then 2.3
when sum(t_service.s_price)-#{prevMonthOutCome} >50000 then 2.5
when sum(t_service.s_price)-#{prevMonthOutCome} >20000 then 2.7
when sum(t_service.s_price)-#{prevMonthOutCome} >10000 then 2.9 else 2.95 end) as
profitGrade
from (((t_m_order inner join t_service on t_m_order.s_no=t_service.s_no) inner join t_e_order on t_e_order.mo_no=t_m_order.mo_no) inner join t_employee on t_employee.e_no= t_e_order.e_no) where date_format(t_m_order.mo_startTime, "%Y%m") = if(substring((date_format(now(), "%Y%m")-1),5,2)='00',
		concat(substring((date_format(now(), "%Y%m")-1),1,4)-1,'12'),
		date_format(now(), "%Y%m")-1) group by t_employee.c_no) as ZZZ on AA.c_no = ZZZ.c_no) as LastOne left join ((select * from t_cancelCall where mo_no=#{mo_no}) as t_cancelCall) on t_cancelCall.e_no = LastOne.e_no where t_cancelCall.e_no is null  order by totalGrade desc, starGrade desc limit 1) where mo_no=#{mo_no};
END 
	
	
	</update>

<select id="selectMoNoByOrderNo" parameterType="java.util.HashMap" resultType="Integer" >
	select mo_no from t_m_order where mo_orderNo = #{orderNo} order by mo_no;
</select>

	<update id="updateENoFirstbyMoNo" parameterType="java.util.HashMap">
		update t_m_order set e_no_first=#{e_no_first} where mo_no=#{mo_no};
	</update>

<!-- ******************************** 창대 끝 ******************************** -->	
	
	
	
	
</mapper>
