<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.haebang.employee.dao.EmployeeDao">

	<!-- 로그인 -->
	<select id="login" parameterType="employeeVo" resultType="employeeVo"> 
		select * from t_employee where e_id = #{e_id} and e_password = #{e_password}		
	</select>
	
	<!-- 지도 -->
	<select id="selectAllmap" parameterType="employeeVo" resultType="mapVo">
		select m.m_name as m_name, m.m_address as m_address, e.e_name as e_name, eo.eo_status as eo_status 
		from t_member m, t_e_order eo, t_employee e, t_m_order mo 
		where e.c_no= #{c_no} and e.e_no = eo.e_no and eo.mo_no = mo.mo_no and mo.m_no = m.m_no;
	</select>


	<!-- 회원가입 -->

	<select id="selectById" parameterType="String" resultType = "employeeVo">
		select e_id, e_type from t_employee where e_id = #{e_id}
	</select>
	
	<select id="selectBybizNo" parameterType="String" resultType = "companyVo">
		select c_bizNo from t_company where c_bizNo = #{c_bizNo}
	</select>

	<select id="selectByCode" parameterType="String" resultType = "companyVo">
		select c_no, c_name, c_phone, c_address, c_bizNo from t_company where c_code = #{c_code}
	</select>
	
	
	<insert id="insertCompany" parameterType="joinEmployeeVo" >
		insert into t_company(c_name, c_address, c_phone, c_bizNo, c_oriName, c_saveName) values(#{c_name}, #{c_address}, #{c_phone}, #{c_bizNo}, #{c_oriName}, #{c_saveName})
	</insert>

	<insert id="insertEmployeeAnd" parameterType="joinEmployeeVo" >
		insert into t_employee(e_id, e_name, e_password, e_phone, e_type, c_no) values(#{e_id}, #{e_name}, #{e_password},#{e_phone}, 'O', (select c_no from t_company where c_name=#{c_name} and c_bizNo =#{c_bizNo}))
	</insert>

	<insert id="insertEmployee" parameterType="joinEmployeeVo" >
		insert into t_employee(e_id, e_name, e_password, e_phone, c_no) values(#{e_id}, #{e_name}, #{e_password},#{e_phone}, (select c_no from t_company where c_name=#{c_name} and c_bizNo =#{c_bizNo}))
	</insert>

	<!-- 공지사항 게시판 -->	
	<select id="selectnoticeList" parameterType="java.util.Map" resultType="noticeBoardVo">
        SELECT * FROM t_notice
        <where>
            <if test="titlecontent != null">
                n_content like CONCAT('%',#{titlecontent},'%') or n_title like CONCAT('%',#{titlecontent},'%')
            </if>
        </where>

        ORDER BY n_no DESC
        limit #{startpoint}, #{row} 
    </select>

	
	<select id="selectTotalCount" parameterType="java.util.Map" resultType="Integer">
        SELECT COUNT(*) FROM t_notice        
        <where>
            <if test="titlecontent != null">
                n_content like CONCAT('%',#{titlecontent},'%') or n_title like CONCAT('%',#{titlecontent},'%')
            </if>
        </where>        

    </select>

	<select id="selectnoticeDetail" parameterType="int" resultType="noticeBoardVo">
		select * from t_notice where n_no = #{no}
	</select>
	
	
	<select id="selectmainnoticelist" resultType="noticeBoardVo">
		SELECT n_no, n_title, n_writer, n_content, n_viewCnt, date_format(n_regDate, '%Y-%m-%d') as n_regDate FROM t_notice ORDER BY n_no DESC LIMIT 0, 5;
	</select>
	
	<select id="selectIdByPhone" parameterType="hashMap" resultType="employeeVo">
		select e_id, date_format(e_joinDate, '%Y-%m-%d') as e_joinDate from t_employee where e_name=#{name} and e_phone=#{phone}
	</select>
	
	<select id="selectIdByBizNo" parameterType="java.util.Map" resultType="employeeVo">
		select e.e_id, date_format(e_joinDate, '%Y-%m-%d') as e_joinDate from t_employee e, t_company c where e.e_name=#{name} and c.c_name=#{companyName} and c.c_bizNo=#{bizNo} and c.c_no = e.c_no;
	</select>
	
	<select id="getIdbyId" parameterType="employeeVo" resultType="employeeVo"> 
		select e_id from t_employee where e_id=#{e_id}
	</select>
	
	<select id="changepassword" parameterType="employeeVo">
		update t_employee set e_password=#{e_password} where e_id=#{e_id}
	</select>
	
</mapper>
